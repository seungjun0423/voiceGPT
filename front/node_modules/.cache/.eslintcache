[{"/Users/leeseungjun/Private/project/voiceGPT/front/src/index.js":"1","/Users/leeseungjun/Private/project/voiceGPT/front/src/App.jsx":"2"},{"size":256,"mtime":1676369845047,"results":"3","hashOfConfig":"4"},{"size":3930,"mtime":1676785857123,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","suppressedMessages":"8","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"9"},"1tjiavk",{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},"/Users/leeseungjun/Private/project/voiceGPT/front/src/index.js",[],[],[],"/Users/leeseungjun/Private/project/voiceGPT/front/src/App.jsx",["14","15","16","17","18","19"],[],"import React from 'react';\nimport { useState, useEffect } from 'react';\nimport styled from \"styled-components\";\n\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport useTextToSpeech from 'react-hook-text-to-speech';\n\nimport ic_mic_on from './img/ic_mic_on_180.png';\nimport ic_mic_off from './img/ic_mic_off_180.png';\nimport ic_trash from './img/ic_trash_180.png';\n\nimport git from './img/github-mark.svg'\n\n\nconst Main = styled.div`\n  width:100%;\n  height:600px;\n  position:relative;\n  display:flex;\n`\n\nconst Wrap = styled.div`\n  margin-right:auto;\n  margin-left:auto;\n`\n\nconst Des = styled.div`\n  width:100%;\n  font-size:20px;\n  color:grey;\n  font-family: 'Nanum Gothic', sans-serif;\n  margin-top:30px;\n  color:#343a40;\n`\n\nconst Div = styled.div`\n  box-sizing:border-box;\n  position: -webkit-sticky;\n  position: sticky;\n  top:0;\n  border: solid 0.1px orange ;\n  text-align:center;\n  font-weight:bold;\n  font-size:50px;\n  font-family: 'Nanum Gothic', sans-serif;\n  color:#343a40;\n  @media(max-width:520px){\n    font-size:40px;\n  }\n`\n\nconst Title = styled.div`\n  font-family: 'Nanum Gothic', sans-serif;\n  color:#343a40;\n  font-size:100px;\n  margin-top:20px;\n  @media(max-width:520px){\n    font-size:40px;\n  }\n`\n\nconst Img = styled.img`\n  object-fit:cover;\n  width:100px;\n  border-radius:30px;\n  @media(max-width:520px){\n    width:60px;\n    border-radius:18px;\n  }\n`\n\nconst Button = styled.button`\n  border-radius:30px;\n  padding:0 0 0 0;\n  margin:30px 10px 0px 10px;\n  cursor:pointer;\n  border:none;\n  color:white;\n  @media(max-width:520px){\n    width:60px;\n    border-radius:18px;\n  }\n`\n\nconst P = styled.p`\n  font-size:16px;\n`\n\nconst Input = styled.input`\n  margin-top:30px;\n  width:500px;\n  height:100px;\n  @media(max-width:520px){\n    width:250px;\n  }\n`\n\nconst Footer = styled.div`\n  display:flex;\n  width:100%;\n  height:100%;\n  bottom:0px;\n  font-family: 'Nanum Gothic', sans-serif;\n  background-color:#cbcbcb;\n  font-size:22px;\n  padding-top:50px;\n  padding-bottom:200px;\n  margin-top:100px;\n  @media(max-width:520px){\n    font-size:16px;\n  } \n`\n\nconst Text = styled.p`\n  fontSize:\"20px\";\n  margin:20px;\n`\n\nconst App = () => {\n  const [mic, setMic] = useState(false);\n\n  // speech-recognition \n  const { transcript,listening,resetTranscript,browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n\n  // text-to-speech\n  const [text, setText] = useState('');\n  const convert=useTextToSpeech();\n\n  // speech-recognition\n  if (!browserSupportsSpeechRecognition) {\n    return <span>Browser doesn't support speech recognition.</span>;\n  }\n\n  const intervalMicOn = () => {\n    \n  }\n\n  return (\n    <>\n      <Div>\n        <Title>\n            무물보\n        </Title>\n        <Main>\n          <Wrap>\n            <Des>\n              AI를 쉽고 편하게 이용해보세요<br/><br/>\n              사용법<br/>\n              1. 버튼을 눌러 마이크를 켭니다.<br/>\n              2. 궁금한점을 물어봅니다.<br/>\n              3. 답을 듣습니다<br/>\n            </Des>\n\n            <div style={{ marginTop:'40px'}}>\n              마이크 : {listening ? '켜짐' : '꺼짐'}\n            </div>\n            {!listening?\n              <Button onClick={SpeechRecognition.startListening}>\n                <Img src={ic_mic_on}></Img>\n              </Button>:\n            <Button onClick={SpeechRecognition.stopListening}>\n              <Img src={ic_mic_off}></Img>\n            </Button>}\n            <Button onClick={resetTranscript}>\n              <Img src={ic_trash}></Img>\n            </Button>\n            <Text>\n              {transcript}\n            </Text>\n              <Input onChange={(e)=>setText(e.target.value)} defaultValue={\"\"}/>\n              <button onClick={()=>convert(text)}>\n                click\n              </button>\n          </Wrap>\n        </Main>\n    \n        <Footer>\n\n        </Footer>\n      </Div>\n    </>\n\n  );\n}\n\nexport default App;\n",{"ruleId":"20","severity":1,"message":"21","line":2,"column":20,"nodeType":"22","messageId":"23","endLine":2,"endColumn":29},{"ruleId":"20","severity":1,"message":"24","line":12,"column":8,"nodeType":"22","messageId":"23","endLine":12,"endColumn":11},{"ruleId":"20","severity":1,"message":"25","line":85,"column":7,"nodeType":"22","messageId":"23","endLine":85,"endColumn":8},{"ruleId":"20","severity":1,"message":"26","line":120,"column":10,"nodeType":"22","messageId":"23","endLine":120,"endColumn":13},{"ruleId":"20","severity":1,"message":"27","line":120,"column":15,"nodeType":"22","messageId":"23","endLine":120,"endColumn":21},{"ruleId":"20","severity":1,"message":"28","line":135,"column":9,"nodeType":"22","messageId":"23","endLine":135,"endColumn":22},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'git' is defined but never used.","'P' is assigned a value but never used.","'mic' is assigned a value but never used.","'setMic' is assigned a value but never used.","'intervalMicOn' is assigned a value but never used."]